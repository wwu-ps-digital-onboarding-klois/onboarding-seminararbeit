# This is the language of our project.
language: php

# Installs the required version of Firefox for Behat, an updated version
# of PostgreSQL and extra APT packages. Java 8 is only required
# for Mustache command.
addons:
 postgresql: "9.5"

services:
 - mysql
 - postgresql
 - docker

# Cache NPM's and Composer's caches to speed up build times.
cache:
 directories:
  - $HOME/.composer/cache
  - $HOME/.npm

# Determines which versions of PHP to test our project against.  Each version
# listed here will create a separate build and run the tests against that
# version of PHP.
php:
 - 7.4

# This section sets up the environment variables for the build.
env:
 global:
  # This line determines which version branch of Moodle to test against.
  - MOODLE_BRANCH=MOODLE_39_STABLE
  - IGNORE_PATHS=lang,editor,library,reporting
 # This matrix is used for testing against multiple databases.  So for
 # each version of PHP being tested, one build will be created for each
 # database listed here.  EG: for PHP 5.6, one build will be created
 # using PHP 5.6 and pgsql.  In addition, another build will be created
 # using PHP 5.6 and mysqli.
 matrix:
  - DB=mysqli

# Optionally, it is possible to specify a different Moodle repo to use
# (git://github.com/moodle/moodle.git is used by default):
# - MOODLE_REPO=git://github.com/username/moodle.git

# This lists steps that are run before the installation step.
before_install:
 # This disables XDebug which should speed up the build.
 - phpenv config-rm xdebug.ini
 # Currently we are inside of the clone of your repository.  We move up two
 # directories to build the project.
 - cd ../..
 # Install this project into a directory called "ci".
 - composer create-project -n --no-dev --prefer-dist moodlehq/moodle-plugin-ci ci ^3
 # Update the $PATH so scripts from this project can be called easily.
 - export PATH="$(cd ci/bin; pwd):$(cd ci/vendor/bin; pwd):$PATH"

# This lists steps that are run for installation and setup.
install:
 # Run the default install.  The overview of what this does:
 #    - Clone the Moodle project into a directory called moodle.
 #    - Create a data directory called moodledata.
 #    - Create Moodle config.php, database, etc.
 #    - Copy your plugin(s) into Moodle.
 #    - Run Composer install within Moodle.
 #    - Run NPM install in Moodle and in your plugin if it has a "package.json".
 #    - Run "grunt ignorefiles" within Moodle to update ignore file lists.
 #    - If your plugin has Behat features, then Behat will be setup.
 #    - If your plugin has unit tests, then PHPUnit will be setup.
 - moodle-plugin-ci install

# This lists steps that are run for the purposes of testing.  Any of
# these steps can be re-ordered or removed to your liking.  And of
# course, you can add any of your own custom steps.
script:
 # This step runs the Moodle Code Checker to make sure that your plugin
 # conforms to the Moodle coding standards.  It is highly recommended
 # that you keep this step.
 - moodle-plugin-ci validate
 # This step runs the PHPUnit tests of your plugin.  If your plugin has
 # PHPUnit tests, then it is highly recommended that you keep this step.
 - moodle-plugin-ci phpunit
